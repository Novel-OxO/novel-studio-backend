generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum CourseLevel {
  BEGINNER // 입문
  BASIC // 초급
  INTERMEDIATE // 중급
}

enum CourseStatus {
  DRAFT
  OPEN
}

model User {
  id              String   @id @default(cuid())
  nickname        String   @map("nickname")
  email           String
  hashedPassword  String   @map("hashed_password")
  profileImageUrl String?  @map("profile_image_url")
  role            UserRole @default(USER)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") // Soft Delete Column

  courses   Course[]   // 강사가 만든 코스들
  cartItems CartItem[] // 장바구니 아이템들

  @@index([email])
  @@map("users")
}

model Course {
  id           String       @id @default(uuid())
  slug         String       @unique
  title        String
  description  String       @map("description")
  thumbnailUrl String?      @map("thumbnail_url")
  price        Int          @default(0)
  level        CourseLevel  @default(BEGINNER)
  status       CourseStatus @default(DRAFT)
  instructorId String       @map("instructor_id")
  instructor   User         @relation(fields: [instructorId], references: [id])
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  deletedAt    DateTime?    @map("deleted_at") // Soft Delete Column

  sections  Section[]
  lectures  Lecture[]
  cartItems CartItem[] // 장바구니에 담긴 아이템들

  @@index([slug])
  @@map("courses")
}

model Section {
  id        String    @id @default(uuid())
  title     String
  order     Int
  courseId  String    @map("course_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") // Soft Delete Column

  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lectures Lecture[]

  @@map("sections")
}

model Lecture {
  id               String    @id @default(uuid())
  title            String
  description      String?
  order            Int
  duration         Int?
  isPreview        Boolean   @default(false) @map("is_preview")
  sectionId        String    @map("section_id")
  courseId         String    @map("course_id")
  videoStorageInfo Json?     @map("video_storage_info")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  deletedAt        DateTime? @map("deleted_at") // Soft Delete Column

  section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("lectures")
}

// 장바구니 아이템
model CartItem {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  courseId  String   @map("course_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("cart_items")
}