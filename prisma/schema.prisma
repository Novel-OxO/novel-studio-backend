generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum CourseLevel {
  BEGINNER // 입문
  BASIC // 초급
  INTERMEDIATE // 중급
}

enum CourseStatus {
  DRAFT
  OPEN
}

enum OrderStatus {
  PENDING   // 결제 대기
  PAID      // 결제 완료
  CANCELLED // 취소됨
}


model User {
  id              String   @id @default(cuid())
  nickname        String   @map("nickname")
  email           String
  hashedPassword  String   @map("hashed_password")
  profileImageUrl String?  @map("profile_image_url")
  role            UserRole @default(USER)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") // Soft Delete Column

  courses       Course[]      // 강사가 만든 코스들
  cartItems     CartItem[]    // 장바구니 아이템들
  orders        Order[]       // 주문 내역
  enrollments   Enrollment[]  // 수강 내역
  questions     Question[]    // 작성한 질문들
  answers       Answer[]      // 작성한 답변들
  reviews       Review[]      // 작성한 리뷰들
  reviewReplies ReviewReply[] // 작성한 리뷰 답글들

  @@index([email])
  @@map("users")
}

model Course {
  id           String       @id @default(uuid())
  slug         String       @unique
  title        String
  description  String       @map("description")
  thumbnailUrl String?      @map("thumbnail_url")
  price        Int          @default(0)
  level        CourseLevel  @default(BEGINNER)
  status       CourseStatus @default(DRAFT)
  instructorId String       @map("instructor_id")
  instructor   User         @relation(fields: [instructorId], references: [id])
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  deletedAt    DateTime?    @map("deleted_at") // Soft Delete Column

  sections    Section[]
  lectures    Lecture[]
  cartItems   CartItem[]   // 장바구니에 담긴 아이템들
  enrollments Enrollment[] // 수강 내역
  questions   Question[]   // 강의 관련 질문들
  reviews     Review[]     // 강의 리뷰들

  @@index([slug])
  @@map("courses")
}

model Section {
  id        String    @id @default(uuid())
  title     String
  order     Int
  courseId  String    @map("course_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") // Soft Delete Column

  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lectures Lecture[]

  @@map("sections")
}

model Lecture {
  id               String    @id @default(uuid())
  title            String
  description      String?
  order            Int
  duration         Int?
  isPreview        Boolean   @default(false) @map("is_preview")
  sectionId        String    @map("section_id")
  courseId         String    @map("course_id")
  videoStorageInfo Json?     @map("video_storage_info")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  deletedAt        DateTime? @map("deleted_at") // Soft Delete Column

  section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("lectures")
}

// 장바구니 아이템
model CartItem {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  courseId  String   @map("course_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("cart_items")
}

// 주문
model Order {
  id         String      @id @default(uuid())
  userId     String      @map("user_id")
  totalPrice Int         @map("total_price")
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  payment    Payment?

  @@index([userId])
  @@index([status])
  @@map("orders")
}

// 주문 아이템 (주문 시점의 코스 정보 스냅샷)
model OrderItem {
  id              String   @id @default(uuid())
  orderId         String   @map("order_id")
  courseId        String   @map("course_id") // FK 아님, 참조용
  courseTitle     String   @map("course_title")
  courseSlug      String   @map("course_slug")
  courseThumbnail String?  @map("course_thumbnail")
  price           Int
  createdAt       DateTime @default(now()) @map("created_at")

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@map("order_items")
}

// 결제 모델 (포트원 연동용)
model Payment {
  id                   String    @id @default(uuid())
  paymentId            String    @unique @map("payment_id") // 포트원 결제 ID
  orderId              String    @unique @map("order_id")
  transactionId        String?   @map("transaction_id") // 포트원 거래 ID
  amount               Int       @map("amount")
  currency             String    @default("KRW") // 화폐
  paymentMethod        String    @map("payment_method") // 결제 수단 (CARD, VIRTUAL_ACCOUNT, etc)
  pgProvider           String?   @map("pg_provider") // PG사 (tosspayments, etc)
  status               String    @default("READY") // READY, PAID, FAILED, CANCELLED
  failureReason        String?   @map("failure_reason")
  paidAt               DateTime? @map("paid_at")
  cancelledAt          DateTime? @map("cancelled_at")
  // 가상계좌 정보
  virtualAccountNumber String?   @map("virtual_account_number")
  virtualAccountBank   String?   @map("virtual_account_bank")
  virtualAccountHolder String?   @map("virtual_account_holder")
  virtualAccountExpiry DateTime? @map("virtual_account_expiry")
  // 포트원 웹훅 정보
  portoneData          Json?     @map("portone_data") // 포트원에서 받은 전체 데이터
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([paymentId])
  @@index([status])
  @@index([transactionId])
  @@map("payments")
}

// 수강 정보
model Enrollment {
  id                String    @id @default(uuid())
  userId            String    @map("user_id")
  courseId          String    @map("course_id")
  enrolledAt        DateTime  @default(now()) @map("enrolled_at") // 수강 시작 시각
  expiresAt         DateTime? @map("expires_at") // 수강 만료 시각 (null이면 평생)
  lastAccessedAt    DateTime? @map("last_accessed_at") // 마지막 접근 시각
  progress          Int       @default(0) // 진행률 (0-100)
  isCompleted       Boolean   @default(false) @map("is_completed") // 완료 여부
  completedAt       DateTime? @map("completed_at") // 완료 시각
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@map("enrollments")
}

// ==================== QnA System ====================

// 질문
model Question {
  id         String    @id @default(uuid())
  title      String    // 질문 제목
  content    String    @db.Text // 질문 내용
  userId     String    @map("user_id") // 질문 작성자
  courseId   String    @map("course_id") // 관련 강의
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  answers Answer[] // 답변들

  @@index([userId])
  @@index([courseId])
  @@map("questions")
}

// 답변
model Answer {
  id         String    @id @default(uuid())
  content    String    @db.Text // 답변 내용
  userId     String    @map("user_id") // 답변 작성자
  questionId String    @map("question_id") // 관련 질문
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([questionId])
  @@map("answers")
}

// ==================== Review System ====================

// 수강평
model Review {
  id        String    @id @default(uuid())
  rating    Int       // 평점 (1-5)
  title     String    // 리뷰 제목
  content   String    @db.Text // 리뷰 내용
  userId    String    @map("user_id") // 작성자
  courseId  String    @map("course_id") // 대상 강의
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") // Soft Delete

  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  reply  ReviewReply? // 강사 답글 (1:1 관계)

  @@unique([userId, courseId]) // 중복 리뷰 방지
  @@index([courseId])
  @@index([rating])
  @@map("reviews")
}

// 수강평 답글 (강사용)
model ReviewReply {
  id        String    @id @default(uuid())
  content   String    @db.Text // 답글 내용
  reviewId  String    @unique @map("review_id") // 리뷰 ID
  userId    String    @map("user_id") // 답글 작성자 (강사)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("review_replies")
}